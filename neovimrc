set nocompatible               " be iMproved
filetype off                   " required!

set number
syntax on
set autoread
set ruler
set encoding=utf8

" Whitespace stuff
set nowrap
set tabstop=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:Â·

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*
set wildignore+=*/tmp/*,*.so,*.swp,*.zip

" Status bar
set laststatus=2

" Map leader
let mapleader = ";"

call plug#begin('~/.vim/plugged')

Plug 'junegunn/limelight.vim' " Help to highlight the current line Use by :Limelight => https://github.com/junegunn/limelight.vim

Plug 'scrooloose/nerdtree' " Define the tree file explorer => https://github.com/preservim/nerdtree
Plug 'Xuyuanp/nerdtree-git-plugin' " Plugin to see difference in the tree file explorer of Git information

Plug 'godlygeek/tabular' " Manage the align text => https://github.com/godlygeek/tabular :help tabular

Plug 'ctrlpvim/ctrlp.vim'

Plug 'tpope/vim-commentary' " Help to comment a line : comment line with gc => https://github.com/tpope/vim-commentary

Plug 'vim-ruby/vim-ruby'
Plug 'ngmy/vim-rubocop'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'

Plug 'tpope/vim-fugitive' " Big plugin to manage git => https://github.com/tpope/vim-fugitive
Plug 'tpope/vim-git' " Plugin to help with git commit information with command :DiffGitCached to see information

Plug 'tpope/vim-dispatch' " Plugin to help launching task outside vim and get the result in buffer => https://github.com/tpope/vim-dispatch

Plug 'tpope/vim-surround' " Plugin to help made char between other char use with S in visual mode with char After  => https://github.com/tpope/vim-surround

" Plugin to manage golang help system
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'github/copilot.vim', { 'do': ':Copilot setup' }
Plug 'EdenEast/nightfox.nvim' " Theme with colorblind maybe

Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

" (Optional) Multi-entry selection UI.
Plug 'junegunn/fzf', {'do': { -> fzf#install() }}

"Terraform plugin
Plug 'hashivim/vim-terraform'


" Plugin to improve the HL code. Can be update by TSInstall or TSUpdate
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

Plug 'neovim/nvim-lspconfig'
Plug 'williamboman/mason.nvim'
Plug 'williamboman/mason-lspconfig.nvim'

Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'L3MON4D3/LuaSnip'

Plug 'VonHeikemen/lsp-zero.nvim', {'branch': 'v3.x'}

Plug 'nvim-lua/plenary.nvim' " Required for telescope and simple function lua set
Plug 'nvim-telescope/telescope.nvim' " Change from CtrlP ?

call plug#end()

" change wrapping in some kind of file
function s:setupWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=72
endfunction

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru,Guardfile}    set ft=ruby

" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupWrapping()

" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript
au BufRead,BufNewFile *.txt call s:setupWrapping()

" Yaml Configuration
au BufRead,BufNewFile *.{yml,yaml} set foldmethod=indent

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

" Use modeline overrides
" The system to check on top of file if there are override of mode
set modeline
set modelines=5

" Patter ignore when use the completion in search file
set wig=*.o,*.obj,*~,#*#,*.pyc,*.tar*,*.avi,*.ogg,*.mp3

" No save backup by .swp
set nowb
set noswapfile
set noar

" Delete all whitespace in end of line
autocmd BufWritePre * :%s/\s\+$//e

set foldmethod=syntax

"spell check when writing commit logs
autocmd filetype svn,*commit* set spell

let g:vimrubocop_rubocop_cmd = 'bundle exec rubocop '


" ctrlp configuration
"let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.git|node_modules|tmp\/cache|tmp\/storage',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }
"let g:ctrlp_user_command = 'find %s -type f | grep -v -e "\.git$|node_modules$"'
let g:ctrlp_max_files = 0 " On big repository no limit is helpfull


if has("autocmd")
  augroup templates
    autocmd BufNewFile *.rb 0r ~/.vim/templates/skeleton.rb
  augroup END
endif


" Launch gopls when Go files are in use
let g:LanguageClient_serverCommands = {
       \ 'go': ['gopls']
       \ }
" Run gofmt on save
" autocmd BufWritePre *.go :call LanguageClient#textDocument_formatting_sync()

runtime lua/nightfox_init.lua
runtime lua/lsp_zero_config.lua
runtime lua/nvim-treesitter_config.lua
runtime lua/telescope_config.lua

" mfussenegger/nvim-lint
" stevearc/conform.nvim => formatter
" nvim-cmp => autocompletion
" oil.nviim => file_explorer


"" Configuration of NERDTree
nnoremap <Leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>



" Terraform plugin configuration
let g:terraform_align = 1 " Use tabular to tabular terraform system
let g:terraform_fmt_on_save = 1 " Force Terraform fmt on save
let g:hcl_align = 1 " Align setting with tabular

" :Telescope find_files theme=ivy
